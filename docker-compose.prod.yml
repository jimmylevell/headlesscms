version: '3'
services:
  directus-cache:
    image: redis:6
    networks:
      - directus
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  directus:
    image: ghcr.io/jimmylevell/headlesscms/directus:latest
    networks:
      - directus
      - levell
      - traefik-public
    depends_on:
      - directus-cache
    environment:
      KEY: DOCKER-SECRET->KEY_DIRECTUS
      SECRET: DOCKER-SECRET->SECRET_DIRECTUS

      DB_CLIENT: 'pg'
      DB_HOST: 'levell-postgres'
      DB_PORT: '5432'
      DB_DATABASE: 'directus_database'
      DB_USER: DOCKER-SECRET->DATABASE_USER_DIRECTUS
      DB_PASSWORD: DOCKER-SECRET->DATABASE_PASSWORD_DIRECTUS

      CACHE_ENABLED: 'true'
      CACHE_STORE: 'redis'
      CACHE_REDIS: 'redis://directus-cache:6379'

      ADMIN_EMAIL: DOCKER-SECRET->ADMIN_EMAIL_DIRECTUS
      ADMIN_PASSWORD: DOCKER-SECRET->ADMIN_PASSWORD_DIRECTUS

      PUBLIC_URL: 'https://directus.app.levell.ch'
    secrets: 
      - DATABASE_USER_DIRECTUS
      - DATABASE_PASSWORD_DIRECTUS
      - KEY_DIRECTUS
      - SECRET_DIRECTUS
      - ADMIN_EMAIL_DIRECTUS
      - ADMIN_PASSWORD_DIRECTUS
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true # enable traefik
        - traefik.docker.network=traefik-public # put it in the same network as traefik
        - traefik.constraint-label=traefik-public # assign the same label as traefik so it can be discovered
        - traefik.http.routers.directus.rule=Host(`directus.app.levell.ch`) # listen to port 80 for request to APP_DOMAIN (use together with the line below)
        - traefik.http.routers.directus.entrypoints=http
        - traefik.http.routers.directus.middlewares=https-redirect
        - traefik.http.middlewares.directus.redirectscheme.scheme=https # redirect traffic to https
        - traefik.http.middlewares.directus.redirectscheme.permanent=true # redirect traffic to https
        - traefik.http.routers.directus-secured.rule=Host(`directus.app.levell.ch`) # listen to port 443 for request to APP_DOMAIN (use together with the line below)
        - traefik.http.routers.directus-secured.entrypoints=https
        - traefik.http.routers.directus-secured.tls.certresolver=le # use the Let's Encrypt certificate we set up earlier
        - traefik.http.services.directus-secured.loadbalancer.server.port=8055 # ask Traefik to search for port of the service container

networks:
  directus:
  traefik-public:
    external: true
  levell:
    external: true

secrets: 
  DATABASE_USER_DIRECTUS:
    external: true
  DATABASE_PASSWORD_DIRECTUS:
    external: true
  KEY_DIRECTUS:
    external: true
  SECRET_DIRECTUS:
    external: true
  ADMIN_EMAIL_DIRECTUS:
    external: true
  ADMIN_PASSWORD_DIRECTUS:
    external: true